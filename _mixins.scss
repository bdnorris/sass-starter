@use 'sass:math';
// use in button elements to reset styles before adding your own.
@mixin button-reset {
  background-image: none;
  background-color: transparent;
  border-radius: 0;
  box-shadow: none;
  -webkit-appearance: none;
  border: none;
  padding: 0;
  margin: 0;
  font-family: inherit;
}

// for centered elements with a max-width, see codepen for example. https://codepen.io/bdnorris/pen/ydeMgj
@mixin default-sizing($max) {
  margin-left: $mobile-margin;
  margin-right: $mobile-margin;
  max-width: $max;
  @include breakpoint(large) {
    margin-left: $desktop-margin;
    margin-right: $desktop-margin;
  }
  @include breakpoint ($max up) {
    margin-left: auto;
    margin-right: auto;
    padding-left: $desktop-margin;
    padding-right: $desktop-margin;
  }
}

// New version of the above using max()
@mixin max-width-variable($max: $global-max-width, $block-padding: 1em) {
  padding: $block-padding unquote("max(1.5rem, 50vw - " + $max + " / 2)");
  @include breakpoint ($max up) {
    padding: $block-padding unquote("max(2rem, 50vw - " + $max + " / 2)");
  }
}

// https://css-tricks.com/snippets/sass/px-to-em-functions/
// Use Ems, but no math to do when working from design programs
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return math.div($pixels, $context) * 1em;
}

@mixin visually-hidden {
  // accessible hide
  position: absolute;
  left:     -10000px;
  top:      auto;
  width:    1px;
  height:   1px;
  overflow: hidden;
}

@mixin breakpoint($values...) {
  // get the first value passed to the mixin
  $value: nth($values, 1);
  // Direction of media query (up, down, or to)
  $direction: if(length($values) > 1, nth($values, 2), false);
  // if to, then get the third value
  $lastValue: if(length($values) > 2, nth($values, 3), false);
  // get the actual matching value from the list
  $str: map-get($breakpoints, $value);
  // if it's not in the list, then let's just used what was passed directly
  @if ($str) {
    $str: $str;
  }
  @else {
    $str: $value;
  }
  @if ($direction == "down") {
    @media screen and (max-width: #{$str}) {
      @content;
    }
  } @elseif ($direction == "to") {
    @media screen and (min-width: #{$str}) and (max-width: #{map-get($breakpoints, $lastValue)}) {
      @content;
    }
  } @else {
    @media screen and (min-width: #{$str}) {
      @content;
    }
  }
}